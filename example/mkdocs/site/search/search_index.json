{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Doxybook Example Output This is an example C++ project for doxybook generator This is an empty README file, I was too lazy to write some lorem ipsum text. Please check the links in the navbar above to see the generated files. Or why not jump straight into the documentation.","title":"Doxybook Example Output"},{"location":"#doxybook-example-output","text":"","title":"Doxybook Example Output"},{"location":"#this-is-an-example-c-project-for-doxybook-generator","text":"This is an empty README file, I was too lazy to write some lorem ipsum text. Please check the links in the navbar above to see the generated files. Or why not jump straight into the documentation.","title":"This is an example C++ project for doxybook generator"},{"location":"api/","text":"My Personal Index Page Introduction This is the introduction. Installation Step 1: Opening the box etc...","title":"My Personal Index Page"},{"location":"api/#my-personal-index-page","text":"","title":"My Personal Index Page"},{"location":"api/#introduction","text":"This is the introduction.","title":"Introduction"},{"location":"api/#installation","text":"","title":"Installation"},{"location":"api/#step-1-opening-the-box","text":"etc...","title":"Step 1: Opening the box"},{"location":"api/animal_8h/","text":"File animal.h File List > src > animal.h Go to the source code of this file. #include <functional> #include \"animal_interface.h\" Namespaces Type Name namespace example namespace inner_namespace Classes Type Name class Animal Base class for all animals from which Bird derives. struct Result Some random inner class of Animal . class Vector Public Functions Type Name void some_global_function ( example::Animal * animal) Some random global function that modifies Animal. Public Functions Documentation function some_global_function void some_global_function ( example::Animal * animal ) See also: Animal Parameters: animal The pointer to the animal instance The documentation for this class was generated from the following file src/animal.h","title":"File animal.h"},{"location":"api/animal_8h/#file-animalh","text":"File List > src > animal.h Go to the source code of this file. #include <functional> #include \"animal_interface.h\"","title":"File animal.h"},{"location":"api/animal_8h/#namespaces","text":"Type Name namespace example namespace inner_namespace","title":"Namespaces"},{"location":"api/animal_8h/#classes","text":"Type Name class Animal Base class for all animals from which Bird derives. struct Result Some random inner class of Animal . class Vector","title":"Classes"},{"location":"api/animal_8h/#public-functions","text":"Type Name void some_global_function ( example::Animal * animal) Some random global function that modifies Animal.","title":"Public Functions"},{"location":"api/animal_8h/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/animal_8h/#function-some95global95function","text":"void some_global_function ( example::Animal * animal ) See also: Animal Parameters: animal The pointer to the animal instance The documentation for this class was generated from the following file src/animal.h","title":"function some_global_function"},{"location":"api/animal_8h_source/","text":"File animal.h File List > src > animal.h Go to the documentation of this file. #ifndef EXAMPLE_ANIMAL_H #define EXAMPLE_ANIMAL_H #include <functional> #include \"animal_interface.h\" namespace example { namespace inner_namespace { class Vector { int x, y, z; }; } class Animal: public AnimalInterface { public: enum Type { NONE = 0, INSECT = 1, AMPHIBIAN = 2, BIRD = 3, FISH = 4, REPTILE = 5, MAMMAL = 6 }; typedef std::pair<Animal*, Animal*> Parents; struct Result { const Type type = Type::NONE; const std::string name; const Animal* mother = nullptr; const Animal* father = nullptr; }; static Animal* find_parent_by_name(Animal* child); static Animal* find_child_by_name(Animal* parent); Animal(Type type, const std::string& name, Animal* mother = nullptr, Animal* father = nullptr); Animal(const Animal& other) = delete; Animal(Animal&& animal) noexcept; virtual ~Animal() = default; operator bool() const; void swap(Animal& other) noexcept; int get_num_of_limbs() const override; int get_num_of_eyes() const override; bool has_tail() const override; virtual void move(); virtual void make_sound() = 0; inline Parents get_parents() const { return Parents(mother, father); } inline const std::string& get_name() const { return name; } inline void some_inline_member_function(Animal* animal) { do_more_things(); check_best(); } Animal& operator = (const Animal& other) = delete; Animal& operator = (Animal&& other) noexcept; friend void some_global_function(Animal* animal); protected: Animal* mother; Animal* father; std::string name; }; void some_namespace_function(Animal* animal); typedef std::function<void*(Animal*)> Callback; enum class CallbackType { NONE = 0, EAT, SLEEP, ATTACK }; } extern void some_global_function(example::Animal* animal); #endif","title":"File animal.h"},{"location":"api/animal_8h_source/#file-animalh","text":"File List > src > animal.h Go to the documentation of this file. #ifndef EXAMPLE_ANIMAL_H #define EXAMPLE_ANIMAL_H #include <functional> #include \"animal_interface.h\" namespace example { namespace inner_namespace { class Vector { int x, y, z; }; } class Animal: public AnimalInterface { public: enum Type { NONE = 0, INSECT = 1, AMPHIBIAN = 2, BIRD = 3, FISH = 4, REPTILE = 5, MAMMAL = 6 }; typedef std::pair<Animal*, Animal*> Parents; struct Result { const Type type = Type::NONE; const std::string name; const Animal* mother = nullptr; const Animal* father = nullptr; }; static Animal* find_parent_by_name(Animal* child); static Animal* find_child_by_name(Animal* parent); Animal(Type type, const std::string& name, Animal* mother = nullptr, Animal* father = nullptr); Animal(const Animal& other) = delete; Animal(Animal&& animal) noexcept; virtual ~Animal() = default; operator bool() const; void swap(Animal& other) noexcept; int get_num_of_limbs() const override; int get_num_of_eyes() const override; bool has_tail() const override; virtual void move(); virtual void make_sound() = 0; inline Parents get_parents() const { return Parents(mother, father); } inline const std::string& get_name() const { return name; } inline void some_inline_member_function(Animal* animal) { do_more_things(); check_best(); } Animal& operator = (const Animal& other) = delete; Animal& operator = (Animal&& other) noexcept; friend void some_global_function(Animal* animal); protected: Animal* mother; Animal* father; std::string name; }; void some_namespace_function(Animal* animal); typedef std::function<void*(Animal*)> Callback; enum class CallbackType { NONE = 0, EAT, SLEEP, ATTACK }; } extern void some_global_function(example::Animal* animal); #endif","title":"File animal.h"},{"location":"api/animal__interface_8h/","text":"File animal_interface.h File List > src > animal_interface.h Go to the source code of this file. #include <string> Namespaces Type Name namespace example Classes Type Name interface AnimalInterface The documentation for this class was generated from the following file src/animal_interface.h","title":"File animal\\_interface.h"},{"location":"api/animal__interface_8h/#file-animal95interfaceh","text":"File List > src > animal_interface.h Go to the source code of this file. #include <string>","title":"File animal_interface.h"},{"location":"api/animal__interface_8h/#namespaces","text":"Type Name namespace example","title":"Namespaces"},{"location":"api/animal__interface_8h/#classes","text":"Type Name interface AnimalInterface The documentation for this class was generated from the following file src/animal_interface.h","title":"Classes"},{"location":"api/animal__interface_8h_source/","text":"File animal_interface.h File List > src > animal_interface.h Go to the documentation of this file. #ifndef EXAMPLE_ANIMAL_INTERFACE_H #define EXAMPLE_ANIMAL_INTERFACE_H #include <string> namespace example { class AnimalInterface { public: virtual int get_num_of_limbs() const = 0; virtual int get_num_of_eyes() const = 0; virtual bool has_tail() const = 0; }; } #endif","title":"File animal\\_interface.h"},{"location":"api/animal__interface_8h_source/#file-animal95interfaceh","text":"File List > src > animal_interface.h Go to the documentation of this file. #ifndef EXAMPLE_ANIMAL_INTERFACE_H #define EXAMPLE_ANIMAL_INTERFACE_H #include <string> namespace example { class AnimalInterface { public: virtual int get_num_of_limbs() const = 0; virtual int get_num_of_eyes() const = 0; virtual bool has_tail() const = 0; }; } #endif","title":"File animal_interface.h"},{"location":"api/annotated/","text":"Class List Here are the classes, structs, unions and interfaces with brief descriptions: namespace example class Animal Base class for all animals from which Bird derives. struct Result Some random inner class of Animal . interface AnimalInterface class Bird class CustomException class NumericException class SpecialBird namespace inner_namespace class Vector","title":"Class List"},{"location":"api/annotated/#class-list","text":"Here are the classes, structs, unions and interfaces with brief descriptions: namespace example class Animal Base class for all animals from which Bird derives. struct Result Some random inner class of Animal . interface AnimalInterface class Bird class CustomException class NumericException class SpecialBird namespace inner_namespace class Vector","title":"Class List"},{"location":"api/bird_8h/","text":"File bird.h File List > src > bird.h Go to the source code of this file. #include \"animal.h\" Namespaces Type Name namespace example Classes Type Name class Bird The documentation for this class was generated from the following file src/bird.h","title":"File bird.h"},{"location":"api/bird_8h/#file-birdh","text":"File List > src > bird.h Go to the source code of this file. #include \"animal.h\"","title":"File bird.h"},{"location":"api/bird_8h/#namespaces","text":"Type Name namespace example","title":"Namespaces"},{"location":"api/bird_8h/#classes","text":"Type Name class Bird The documentation for this class was generated from the following file src/bird.h","title":"Classes"},{"location":"api/bird_8h_source/","text":"File bird.h File List > src > bird.h Go to the documentation of this file. #ifndef EXAMPLE_BIRD_H #define EXAMPLE_BIRD_H #include \"animal.h\" namespace example { class Bird: public Animal { public: Bird(const std::string& name, Bird* mother = nullptr, Bird* father = nullptr); Bird(const Bird& other) = delete; Bird(Bird&& Bird) noexcept; ~Bird() = default; void swap(Bird& other) noexcept; void move() override; void make_sound() override; Bird& operator = (const Bird& other) = delete; Bird& operator = (Bird&& other) noexcept; }; } #endif","title":"File bird.h"},{"location":"api/bird_8h_source/#file-birdh","text":"File List > src > bird.h Go to the documentation of this file. #ifndef EXAMPLE_BIRD_H #define EXAMPLE_BIRD_H #include \"animal.h\" namespace example { class Bird: public Animal { public: Bird(const std::string& name, Bird* mother = nullptr, Bird* father = nullptr); Bird(const Bird& other) = delete; Bird(Bird&& Bird) noexcept; ~Bird() = default; void swap(Bird& other) noexcept; void move() override; void make_sound() override; Bird& operator = (const Bird& other) = delete; Bird& operator = (Bird&& other) noexcept; }; } #endif","title":"File bird.h"},{"location":"api/bug/","text":"Bug List Class example::Animal Some random bug","title":"Bug List"},{"location":"api/bug/#bug-list","text":"","title":"Bug List"},{"location":"api/bug/#class-exampleanimal","text":"Some random bug","title":"Class example::Animal"},{"location":"api/class_member_enums/","text":"Class Member Enums t Type ( example::Animal )","title":"Class Member Enums"},{"location":"api/class_member_enums/#class-member-enums","text":"","title":"Class Member Enums"},{"location":"api/class_member_enums/#t","text":"Type ( example::Animal )","title":"t"},{"location":"api/class_member_functions/","text":"Class Member Functions a Animal ( example::Animal ) b Bird ( example::Bird ) c CustomException ( example::CustomException ) d do_something_special ( example::SpecialBird ) f find_child_by_name ( example::Animal ) find_parent_by_name ( example::Animal ) g get_name ( example::Animal ) get_num_of_eyes ( example::Animal , example::AnimalInterface ) get_num_of_limbs ( example::Animal , example::AnimalInterface ) get_parents ( example::Animal ) h has_tail ( example::Animal , example::AnimalInterface ) m make_sound ( example::Animal , example::Bird ) move ( example::Animal , example::Bird ) n NumericException ( example::NumericException ) o operator bool ( example::Animal ) operator= ( example::Animal , example::Bird , example::SpecialBird ) s some_inline_member_function ( example::Animal ) swap ( example::Animal , example::Bird , example::SpecialBird ) SpecialBird ( example::SpecialBird ) w what ( example::CustomException , example::NumericException ) ~ ~Animal ( example::Animal ) ~Bird ( example::Bird ) ~SpecialBird ( example::SpecialBird )","title":"Class Member Functions"},{"location":"api/class_member_functions/#class-member-functions","text":"","title":"Class Member Functions"},{"location":"api/class_member_functions/#a","text":"Animal ( example::Animal )","title":"a"},{"location":"api/class_member_functions/#b","text":"Bird ( example::Bird )","title":"b"},{"location":"api/class_member_functions/#c","text":"CustomException ( example::CustomException )","title":"c"},{"location":"api/class_member_functions/#d","text":"do_something_special ( example::SpecialBird )","title":"d"},{"location":"api/class_member_functions/#f","text":"find_child_by_name ( example::Animal ) find_parent_by_name ( example::Animal )","title":"f"},{"location":"api/class_member_functions/#g","text":"get_name ( example::Animal ) get_num_of_eyes ( example::Animal , example::AnimalInterface ) get_num_of_limbs ( example::Animal , example::AnimalInterface ) get_parents ( example::Animal )","title":"g"},{"location":"api/class_member_functions/#h","text":"has_tail ( example::Animal , example::AnimalInterface )","title":"h"},{"location":"api/class_member_functions/#m","text":"make_sound ( example::Animal , example::Bird ) move ( example::Animal , example::Bird )","title":"m"},{"location":"api/class_member_functions/#n","text":"NumericException ( example::NumericException )","title":"n"},{"location":"api/class_member_functions/#o","text":"operator bool ( example::Animal ) operator= ( example::Animal , example::Bird , example::SpecialBird )","title":"o"},{"location":"api/class_member_functions/#s","text":"some_inline_member_function ( example::Animal ) swap ( example::Animal , example::Bird , example::SpecialBird ) SpecialBird ( example::SpecialBird )","title":"s"},{"location":"api/class_member_functions/#w","text":"what ( example::CustomException , example::NumericException )","title":"w"},{"location":"api/class_member_functions/#_1","text":"~Animal ( example::Animal ) ~Bird ( example::Bird ) ~SpecialBird ( example::SpecialBird )","title":"~"},{"location":"api/class_member_typedefs/","text":"Class Member Typedefs p Parents ( example::Animal )","title":"Class Member Typedefs"},{"location":"api/class_member_typedefs/#class-member-typedefs","text":"","title":"Class Member Typedefs"},{"location":"api/class_member_typedefs/#p","text":"Parents ( example::Animal )","title":"p"},{"location":"api/class_member_variables/","text":"Class Member Variables f father ( example::Animal::Result , example::Animal ) m mother ( example::Animal::Result , example::Animal ) msg ( example::CustomException , example::NumericException ) n name ( example::Animal::Result , example::Animal ) t type ( example::Animal::Result ) x x ( example::inner_namespace::Vector ) y y ( example::inner_namespace::Vector ) z z ( example::inner_namespace::Vector )","title":"Class Member Variables"},{"location":"api/class_member_variables/#class-member-variables","text":"","title":"Class Member Variables"},{"location":"api/class_member_variables/#f","text":"father ( example::Animal::Result , example::Animal )","title":"f"},{"location":"api/class_member_variables/#m","text":"mother ( example::Animal::Result , example::Animal ) msg ( example::CustomException , example::NumericException )","title":"m"},{"location":"api/class_member_variables/#n","text":"name ( example::Animal::Result , example::Animal )","title":"n"},{"location":"api/class_member_variables/#t","text":"type ( example::Animal::Result )","title":"t"},{"location":"api/class_member_variables/#x","text":"x ( example::inner_namespace::Vector )","title":"x"},{"location":"api/class_member_variables/#y","text":"y ( example::inner_namespace::Vector )","title":"y"},{"location":"api/class_member_variables/#z","text":"z ( example::inner_namespace::Vector )","title":"z"},{"location":"api/class_members/","text":"Class Members a Animal ( example::Animal ) b Bird ( example::Bird ) c CustomException ( example::CustomException ) d do_something_special ( example::SpecialBird ) f father ( example::Animal::Result , example::Animal ) find_child_by_name ( example::Animal ) find_parent_by_name ( example::Animal ) g get_name ( example::Animal ) get_num_of_eyes ( example::Animal , example::AnimalInterface ) get_num_of_limbs ( example::Animal , example::AnimalInterface ) get_parents ( example::Animal ) h has_tail ( example::Animal , example::AnimalInterface ) m mother ( example::Animal::Result , example::Animal ) make_sound ( example::Animal , example::Bird ) move ( example::Animal , example::Bird ) msg ( example::CustomException , example::NumericException ) n name ( example::Animal::Result , example::Animal ) NumericException ( example::NumericException ) o operator bool ( example::Animal ) operator= ( example::Animal , example::Bird , example::SpecialBird ) p Parents ( example::Animal ) s some_inline_member_function ( example::Animal ) swap ( example::Animal , example::Bird , example::SpecialBird ) SpecialBird ( example::SpecialBird ) t Type ( example::Animal ) type ( example::Animal::Result ) w what ( example::CustomException , example::NumericException ) x x ( example::inner_namespace::Vector ) y y ( example::inner_namespace::Vector ) z z ( example::inner_namespace::Vector ) ~ ~Animal ( example::Animal ) ~Bird ( example::Bird ) ~SpecialBird ( example::SpecialBird )","title":"Class Members"},{"location":"api/class_members/#class-members","text":"","title":"Class Members"},{"location":"api/class_members/#a","text":"Animal ( example::Animal )","title":"a"},{"location":"api/class_members/#b","text":"Bird ( example::Bird )","title":"b"},{"location":"api/class_members/#c","text":"CustomException ( example::CustomException )","title":"c"},{"location":"api/class_members/#d","text":"do_something_special ( example::SpecialBird )","title":"d"},{"location":"api/class_members/#f","text":"father ( example::Animal::Result , example::Animal ) find_child_by_name ( example::Animal ) find_parent_by_name ( example::Animal )","title":"f"},{"location":"api/class_members/#g","text":"get_name ( example::Animal ) get_num_of_eyes ( example::Animal , example::AnimalInterface ) get_num_of_limbs ( example::Animal , example::AnimalInterface ) get_parents ( example::Animal )","title":"g"},{"location":"api/class_members/#h","text":"has_tail ( example::Animal , example::AnimalInterface )","title":"h"},{"location":"api/class_members/#m","text":"mother ( example::Animal::Result , example::Animal ) make_sound ( example::Animal , example::Bird ) move ( example::Animal , example::Bird ) msg ( example::CustomException , example::NumericException )","title":"m"},{"location":"api/class_members/#n","text":"name ( example::Animal::Result , example::Animal ) NumericException ( example::NumericException )","title":"n"},{"location":"api/class_members/#o","text":"operator bool ( example::Animal ) operator= ( example::Animal , example::Bird , example::SpecialBird )","title":"o"},{"location":"api/class_members/#p","text":"Parents ( example::Animal )","title":"p"},{"location":"api/class_members/#s","text":"some_inline_member_function ( example::Animal ) swap ( example::Animal , example::Bird , example::SpecialBird ) SpecialBird ( example::SpecialBird )","title":"s"},{"location":"api/class_members/#t","text":"Type ( example::Animal ) type ( example::Animal::Result )","title":"t"},{"location":"api/class_members/#w","text":"what ( example::CustomException , example::NumericException )","title":"w"},{"location":"api/class_members/#x","text":"x ( example::inner_namespace::Vector )","title":"x"},{"location":"api/class_members/#y","text":"y ( example::inner_namespace::Vector )","title":"y"},{"location":"api/class_members/#z","text":"z ( example::inner_namespace::Vector )","title":"z"},{"location":"api/class_members/#_1","text":"~Animal ( example::Animal ) ~Bird ( example::Bird ) ~SpecialBird ( example::SpecialBird )","title":"~"},{"location":"api/classes/","text":"Class Index a Animal ( example ) AnimalInterface ( example ) b Bird ( example ) c CustomException ( example ) n NumericException ( example ) r Result ( example::Animal ) s SpecialBird ( example ) v Vector ( example::inner_namespace )","title":"Class Index"},{"location":"api/classes/#class-index","text":"","title":"Class Index"},{"location":"api/classes/#a","text":"Animal ( example ) AnimalInterface ( example )","title":"a"},{"location":"api/classes/#b","text":"Bird ( example )","title":"b"},{"location":"api/classes/#c","text":"CustomException ( example )","title":"c"},{"location":"api/classes/#n","text":"NumericException ( example )","title":"n"},{"location":"api/classes/#r","text":"Result ( example::Animal )","title":"r"},{"location":"api/classes/#s","text":"SpecialBird ( example )","title":"s"},{"location":"api/classes/#v","text":"Vector ( example::inner_namespace )","title":"v"},{"location":"api/classexample_1_1_animal/","text":"Class example::Animal Class List > example > Animal Base class for all animals from which Bird derives. More... #include <animal.h> Inherits the following classes: example::AnimalInterface Inherited by the following classes: example::Bird Classes Type Name struct Result Some random inner class of Animal . Public Types Type Name typedef std::pair< Animal *, Animal * > Parents enum Type The 6 classes of animal kingdom. Public Functions Type Name Animal ( Type type, const std::string & name, Animal * mother=nullptr, Animal * father=nullptr) The main constructor. Animal (const Animal & other) = delete Animal ( Animal && animal) noexcept const std::string & get_name () const Get the name of the animal. virtual int get_num_of_eyes () override const Returns the number of eyes. virtual int get_num_of_limbs () override const Returns the number of limbs. Parents get_parents () const virtual bool has_tail () override const Returns true if the animal has a tail. virtual void make_sound () = 0 virtual void move () operator bool () const Returns true if this is an valid animal. Animal & operator= (const Animal & other) = delete Deleted copy operator. Animal & operator= ( Animal && other) noexcept Move operator. void some_inline_member_function ( Animal * animal) Lorem Ipsum. void swap ( Animal & other) noexcept virtual ~Animal () = default Public Functions inherited from example::AnimalInterface See example::AnimalInterface Type Name virtual int get_num_of_eyes () const = 0 Returns the number of eyes. virtual int get_num_of_limbs () const = 0 Returns the number of limbs. virtual bool has_tail () const = 0 Returns true if the animal has a tail. Public Static Functions Type Name Animal * find_child_by_name ( Animal * parent) Animal * find_parent_by_name ( Animal * child) Protected Attributes Type Name Animal * father The pointer to the father. Animal * mother The pointer to the mother. std::string name Detailed Description Lorem Ipsum Donor. Some Random link with bold and italics And the following is a typewritter font. Example code: Animal animal = Animal(\"Hello World\", nullptr, nullptr); std::cout << animal.get_name() << std::endl; See also: Bird Bug Some random bug Note: Some random note Warning: Some random warning Test Some random test description Todo Some random todo Template parameters: T Some random template paramater description which actually does not exist in the code! Precondition: First initialize the system. Date: 2017-2018 Author: Matus Novak Author: Hello World Public Types Documentation typedef Parents typedef std::pair<Animal*, Animal*> example::Animal::Parents; enum Type enum example::Animal::Type { NONE = 0, INSECT = 1, AMPHIBIAN = 2, BIRD = 3, FISH = 4, REPTILE = 5, MAMMAL = 6 }; Lorem Ipsum Donor. Public Functions Documentation function Animal [1/3] example::Animal::Animal ( Type type, const std::string & name, Animal * mother=nullptr, Animal * father=nullptr ) Use this constructor to allocate a new instance of Animal Parameters: type The type of the animal that matches Animal::Type name Any name to associate the animal with Exception: CustomException If either only mother or father is assigned function Animal [2/3] example::Animal::Animal ( const Animal & other ) = delete function Animal [3/3] example::Animal::Animal ( Animal && animal ) noexcept function get_name inline const std::string & example::Animal::get_name () const Returns: A constant reference to the name function get_num_of_eyes virtual int example::Animal::get_num_of_eyes () override const See also: get_num_of_limbs , get_num_of_eyes Implements example::AnimalInterface::get_num_of_eyes function get_num_of_limbs virtual int example::Animal::get_num_of_limbs () override const See also: get_num_of_eyes , get_num_of_limbs Implements example::AnimalInterface::get_num_of_limbs function get_parents inline Parents example::Animal::get_parents () const function has_tail virtual bool example::Animal::has_tail () override const See also: get_num_of_limbs , get_num_of_eyes Return value: true Does have a tail false Does not have a tail Implements example::AnimalInterface::has_tail function make_sound virtual void example::Animal::make_sound () = 0 function move virtual void example::Animal::move () function operator bool example::Animal::operator bool () const Lorem Ipsum returns true function operator= Animal & example::Animal::operator= ( const Animal & other ) = delete function operator= Animal & example::Animal::operator= ( Animal && other ) noexcept function some_inline_member_function inline void example::Animal::some_inline_member_function ( Animal * animal ) See also: Animal Parameters: animal The pointer to the animal instance Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Implementation: function swap void example::Animal::swap ( Animal & other ) noexcept function ~Animal virtual example::Animal::~Animal () = default Public Static Functions Documentation function find_child_by_name static Animal * example::Animal::find_child_by_name ( Animal * parent ) function find_parent_by_name static Animal * example::Animal::find_parent_by_name ( Animal * child ) Protected Attributes Documentation variable father Animal* example::Animal::father; Can be null! variable mother Animal* example::Animal::mother; Can be null! variable name std::string example::Animal::name; Friends Documentation friend some_global_function friend void example::Animal::some_global_function ( Animal * animal ) See also: Animal Parameters: animal The pointer to the animal instance The documentation for this class was generated from the following file src/animal.h","title":"Class example::Animal"},{"location":"api/classexample_1_1_animal/#class-exampleanimal","text":"Class List > example > Animal Base class for all animals from which Bird derives. More... #include <animal.h> Inherits the following classes: example::AnimalInterface Inherited by the following classes: example::Bird","title":"Class example::Animal"},{"location":"api/classexample_1_1_animal/#classes","text":"Type Name struct Result Some random inner class of Animal .","title":"Classes"},{"location":"api/classexample_1_1_animal/#public-types","text":"Type Name typedef std::pair< Animal *, Animal * > Parents enum Type The 6 classes of animal kingdom.","title":"Public Types"},{"location":"api/classexample_1_1_animal/#public-functions","text":"Type Name Animal ( Type type, const std::string & name, Animal * mother=nullptr, Animal * father=nullptr) The main constructor. Animal (const Animal & other) = delete Animal ( Animal && animal) noexcept const std::string & get_name () const Get the name of the animal. virtual int get_num_of_eyes () override const Returns the number of eyes. virtual int get_num_of_limbs () override const Returns the number of limbs. Parents get_parents () const virtual bool has_tail () override const Returns true if the animal has a tail. virtual void make_sound () = 0 virtual void move () operator bool () const Returns true if this is an valid animal. Animal & operator= (const Animal & other) = delete Deleted copy operator. Animal & operator= ( Animal && other) noexcept Move operator. void some_inline_member_function ( Animal * animal) Lorem Ipsum. void swap ( Animal & other) noexcept virtual ~Animal () = default","title":"Public Functions"},{"location":"api/classexample_1_1_animal/#public-functions-inherited-from-exampleanimalinterface","text":"See example::AnimalInterface Type Name virtual int get_num_of_eyes () const = 0 Returns the number of eyes. virtual int get_num_of_limbs () const = 0 Returns the number of limbs. virtual bool has_tail () const = 0 Returns true if the animal has a tail.","title":"Public Functions inherited from example::AnimalInterface"},{"location":"api/classexample_1_1_animal/#public-static-functions","text":"Type Name Animal * find_child_by_name ( Animal * parent) Animal * find_parent_by_name ( Animal * child)","title":"Public Static Functions"},{"location":"api/classexample_1_1_animal/#protected-attributes","text":"Type Name Animal * father The pointer to the father. Animal * mother The pointer to the mother. std::string name","title":"Protected Attributes"},{"location":"api/classexample_1_1_animal/#detailed-description","text":"Lorem Ipsum Donor. Some Random link with bold and italics And the following is a typewritter font. Example code: Animal animal = Animal(\"Hello World\", nullptr, nullptr); std::cout << animal.get_name() << std::endl; See also: Bird Bug Some random bug Note: Some random note Warning: Some random warning Test Some random test description Todo Some random todo Template parameters: T Some random template paramater description which actually does not exist in the code! Precondition: First initialize the system. Date: 2017-2018 Author: Matus Novak Author: Hello World","title":"Detailed Description"},{"location":"api/classexample_1_1_animal/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"api/classexample_1_1_animal/#typedef-parents","text":"typedef std::pair<Animal*, Animal*> example::Animal::Parents;","title":"typedef Parents"},{"location":"api/classexample_1_1_animal/#enum-type","text":"enum example::Animal::Type { NONE = 0, INSECT = 1, AMPHIBIAN = 2, BIRD = 3, FISH = 4, REPTILE = 5, MAMMAL = 6 }; Lorem Ipsum Donor.","title":"enum Type"},{"location":"api/classexample_1_1_animal/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/classexample_1_1_animal/#function-animal-13","text":"example::Animal::Animal ( Type type, const std::string & name, Animal * mother=nullptr, Animal * father=nullptr ) Use this constructor to allocate a new instance of Animal Parameters: type The type of the animal that matches Animal::Type name Any name to associate the animal with Exception: CustomException If either only mother or father is assigned","title":"function Animal [1/3]"},{"location":"api/classexample_1_1_animal/#function-animal-23","text":"example::Animal::Animal ( const Animal & other ) = delete","title":"function Animal [2/3]"},{"location":"api/classexample_1_1_animal/#function-animal-33","text":"example::Animal::Animal ( Animal && animal ) noexcept","title":"function Animal [3/3]"},{"location":"api/classexample_1_1_animal/#function-get95name","text":"inline const std::string & example::Animal::get_name () const Returns: A constant reference to the name","title":"function get_name"},{"location":"api/classexample_1_1_animal/#function-get95num95of95eyes","text":"virtual int example::Animal::get_num_of_eyes () override const See also: get_num_of_limbs , get_num_of_eyes Implements example::AnimalInterface::get_num_of_eyes","title":"function get_num_of_eyes"},{"location":"api/classexample_1_1_animal/#function-get95num95of95limbs","text":"virtual int example::Animal::get_num_of_limbs () override const See also: get_num_of_eyes , get_num_of_limbs Implements example::AnimalInterface::get_num_of_limbs","title":"function get_num_of_limbs"},{"location":"api/classexample_1_1_animal/#function-get95parents","text":"inline Parents example::Animal::get_parents () const","title":"function get_parents"},{"location":"api/classexample_1_1_animal/#function-has95tail","text":"virtual bool example::Animal::has_tail () override const See also: get_num_of_limbs , get_num_of_eyes Return value: true Does have a tail false Does not have a tail Implements example::AnimalInterface::has_tail","title":"function has_tail"},{"location":"api/classexample_1_1_animal/#function-make95sound","text":"virtual void example::Animal::make_sound () = 0","title":"function make_sound"},{"location":"api/classexample_1_1_animal/#function-move","text":"virtual void example::Animal::move ()","title":"function move"},{"location":"api/classexample_1_1_animal/#function-operator-bool","text":"example::Animal::operator bool () const Lorem Ipsum returns true","title":"function operator bool"},{"location":"api/classexample_1_1_animal/#function-operator","text":"Animal & example::Animal::operator= ( const Animal & other ) = delete","title":"function operator="},{"location":"api/classexample_1_1_animal/#function-operator_1","text":"Animal & example::Animal::operator= ( Animal && other ) noexcept","title":"function operator="},{"location":"api/classexample_1_1_animal/#function-some95inline95member95function","text":"inline void example::Animal::some_inline_member_function ( Animal * animal ) See also: Animal Parameters: animal The pointer to the animal instance Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.","title":"function some_inline_member_function"},{"location":"api/classexample_1_1_animal/#implementation","text":"","title":"Implementation:"},{"location":"api/classexample_1_1_animal/#function-swap","text":"void example::Animal::swap ( Animal & other ) noexcept","title":"function swap"},{"location":"api/classexample_1_1_animal/#function-animal","text":"virtual example::Animal::~Animal () = default","title":"function ~Animal"},{"location":"api/classexample_1_1_animal/#public-static-functions-documentation","text":"","title":"Public Static Functions Documentation"},{"location":"api/classexample_1_1_animal/#function-find95child95by95name","text":"static Animal * example::Animal::find_child_by_name ( Animal * parent )","title":"function find_child_by_name"},{"location":"api/classexample_1_1_animal/#function-find95parent95by95name","text":"static Animal * example::Animal::find_parent_by_name ( Animal * child )","title":"function find_parent_by_name"},{"location":"api/classexample_1_1_animal/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"api/classexample_1_1_animal/#variable-father","text":"Animal* example::Animal::father; Can be null!","title":"variable father"},{"location":"api/classexample_1_1_animal/#variable-mother","text":"Animal* example::Animal::mother; Can be null!","title":"variable mother"},{"location":"api/classexample_1_1_animal/#variable-name","text":"std::string example::Animal::name;","title":"variable name"},{"location":"api/classexample_1_1_animal/#friends-documentation","text":"","title":"Friends Documentation"},{"location":"api/classexample_1_1_animal/#friend-some95global95function","text":"friend void example::Animal::some_global_function ( Animal * animal ) See also: Animal Parameters: animal The pointer to the animal instance The documentation for this class was generated from the following file src/animal.h","title":"friend some_global_function"},{"location":"api/classexample_1_1_animal_interface/","text":"Interface example::AnimalInterface Class List > example > AnimalInterface #include <animal_interface.h> Inherited by the following classes: example::Animal Public Functions Type Name virtual int get_num_of_eyes () const = 0 Returns the number of eyes. virtual int get_num_of_limbs () const = 0 Returns the number of limbs. virtual bool has_tail () const = 0 Returns true if the animal has a tail. Public Functions Documentation function get_num_of_eyes virtual int example::AnimalInterface::get_num_of_eyes () const = 0 See also: get_num_of_limbs function get_num_of_limbs virtual int example::AnimalInterface::get_num_of_limbs () const = 0 See also: get_num_of_eyes function has_tail virtual bool example::AnimalInterface::has_tail () const = 0 See also: get_num_of_limbs Return value: true Does have a tail false Does not have a tail The documentation for this class was generated from the following file src/animal_interface.h","title":"Interface example::AnimalInterface"},{"location":"api/classexample_1_1_animal_interface/#interface-exampleanimalinterface","text":"Class List > example > AnimalInterface #include <animal_interface.h> Inherited by the following classes: example::Animal","title":"Interface example::AnimalInterface"},{"location":"api/classexample_1_1_animal_interface/#public-functions","text":"Type Name virtual int get_num_of_eyes () const = 0 Returns the number of eyes. virtual int get_num_of_limbs () const = 0 Returns the number of limbs. virtual bool has_tail () const = 0 Returns true if the animal has a tail.","title":"Public Functions"},{"location":"api/classexample_1_1_animal_interface/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/classexample_1_1_animal_interface/#function-get95num95of95eyes","text":"virtual int example::AnimalInterface::get_num_of_eyes () const = 0 See also: get_num_of_limbs","title":"function get_num_of_eyes"},{"location":"api/classexample_1_1_animal_interface/#function-get95num95of95limbs","text":"virtual int example::AnimalInterface::get_num_of_limbs () const = 0 See also: get_num_of_eyes","title":"function get_num_of_limbs"},{"location":"api/classexample_1_1_animal_interface/#function-has95tail","text":"virtual bool example::AnimalInterface::has_tail () const = 0 See also: get_num_of_limbs Return value: true Does have a tail false Does not have a tail The documentation for this class was generated from the following file src/animal_interface.h","title":"function has_tail"},{"location":"api/classexample_1_1_bird/","text":"Class example::Bird Class List > example > Bird #include <bird.h> Inherits the following classes: example::Animal Inherited by the following classes: example::SpecialBird Public Types inherited from example::Animal See example::Animal Type Name typedef std::pair< Animal *, Animal * > Parents enum Type The 6 classes of animal kingdom. Public Functions Type Name Bird (const std::string & name, Bird * mother=nullptr, Bird * father=nullptr) Bird (const Bird & other) = delete Bird ( Bird && Bird) noexcept virtual void make_sound () override virtual void move () override Bird & operator= (const Bird & other) = delete Deleted copy operator. Bird & operator= ( Bird && other) noexcept Move operator. void swap ( Bird & other) noexcept ~Bird () = default Public Functions inherited from example::Animal See example::Animal Type Name Animal ( Type type, const std::string & name, Animal * mother=nullptr, Animal * father=nullptr) The main constructor. Animal (const Animal & other) = delete Animal ( Animal && animal) noexcept const std::string & get_name () const Get the name of the animal. virtual int get_num_of_eyes () override const Returns the number of eyes. virtual int get_num_of_limbs () override const Returns the number of limbs. Parents get_parents () const virtual bool has_tail () override const Returns true if the animal has a tail. virtual void make_sound () = 0 virtual void move () operator bool () const Returns true if this is an valid animal. Animal & operator= (const Animal & other) = delete Deleted copy operator. Animal & operator= ( Animal && other) noexcept Move operator. void some_inline_member_function ( Animal * animal) Lorem Ipsum. void swap ( Animal & other) noexcept virtual ~Animal () = default Public Functions inherited from example::AnimalInterface See example::AnimalInterface Type Name virtual int get_num_of_eyes () const = 0 Returns the number of eyes. virtual int get_num_of_limbs () const = 0 Returns the number of limbs. virtual bool has_tail () const = 0 Returns true if the animal has a tail. Public Static Functions inherited from example::Animal See example::Animal Type Name Animal * find_child_by_name ( Animal * parent) Animal * find_parent_by_name ( Animal * child) Protected Attributes inherited from example::Animal See example::Animal Type Name Animal * father The pointer to the father. Animal * mother The pointer to the mother. std::string name Public Functions Documentation function Bird [1/3] example::Bird::Bird ( const std::string & name, Bird * mother=nullptr, Bird * father=nullptr ) function Bird [2/3] example::Bird::Bird ( const Bird & other ) = delete function Bird [3/3] example::Bird::Bird ( Bird && Bird ) noexcept function make_sound virtual void example::Bird::make_sound () override Implements example::Animal::make_sound function move virtual void example::Bird::move () override Implements example::Animal::move function operator= Bird & example::Bird::operator= ( const Bird & other ) = delete function operator= Bird & example::Bird::operator= ( Bird && other ) noexcept function swap void example::Bird::swap ( Bird & other ) noexcept function ~Bird example::Bird::~Bird () = default The documentation for this class was generated from the following file src/bird.h","title":"Class example::Bird"},{"location":"api/classexample_1_1_bird/#class-examplebird","text":"Class List > example > Bird #include <bird.h> Inherits the following classes: example::Animal Inherited by the following classes: example::SpecialBird","title":"Class example::Bird"},{"location":"api/classexample_1_1_bird/#public-types-inherited-from-exampleanimal","text":"See example::Animal Type Name typedef std::pair< Animal *, Animal * > Parents enum Type The 6 classes of animal kingdom.","title":"Public Types inherited from example::Animal"},{"location":"api/classexample_1_1_bird/#public-functions","text":"Type Name Bird (const std::string & name, Bird * mother=nullptr, Bird * father=nullptr) Bird (const Bird & other) = delete Bird ( Bird && Bird) noexcept virtual void make_sound () override virtual void move () override Bird & operator= (const Bird & other) = delete Deleted copy operator. Bird & operator= ( Bird && other) noexcept Move operator. void swap ( Bird & other) noexcept ~Bird () = default","title":"Public Functions"},{"location":"api/classexample_1_1_bird/#public-functions-inherited-from-exampleanimal","text":"See example::Animal Type Name Animal ( Type type, const std::string & name, Animal * mother=nullptr, Animal * father=nullptr) The main constructor. Animal (const Animal & other) = delete Animal ( Animal && animal) noexcept const std::string & get_name () const Get the name of the animal. virtual int get_num_of_eyes () override const Returns the number of eyes. virtual int get_num_of_limbs () override const Returns the number of limbs. Parents get_parents () const virtual bool has_tail () override const Returns true if the animal has a tail. virtual void make_sound () = 0 virtual void move () operator bool () const Returns true if this is an valid animal. Animal & operator= (const Animal & other) = delete Deleted copy operator. Animal & operator= ( Animal && other) noexcept Move operator. void some_inline_member_function ( Animal * animal) Lorem Ipsum. void swap ( Animal & other) noexcept virtual ~Animal () = default","title":"Public Functions inherited from example::Animal"},{"location":"api/classexample_1_1_bird/#public-functions-inherited-from-exampleanimalinterface","text":"See example::AnimalInterface Type Name virtual int get_num_of_eyes () const = 0 Returns the number of eyes. virtual int get_num_of_limbs () const = 0 Returns the number of limbs. virtual bool has_tail () const = 0 Returns true if the animal has a tail.","title":"Public Functions inherited from example::AnimalInterface"},{"location":"api/classexample_1_1_bird/#public-static-functions-inherited-from-exampleanimal","text":"See example::Animal Type Name Animal * find_child_by_name ( Animal * parent) Animal * find_parent_by_name ( Animal * child)","title":"Public Static Functions inherited from example::Animal"},{"location":"api/classexample_1_1_bird/#protected-attributes-inherited-from-exampleanimal","text":"See example::Animal Type Name Animal * father The pointer to the father. Animal * mother The pointer to the mother. std::string name","title":"Protected Attributes inherited from example::Animal"},{"location":"api/classexample_1_1_bird/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/classexample_1_1_bird/#function-bird-13","text":"example::Bird::Bird ( const std::string & name, Bird * mother=nullptr, Bird * father=nullptr )","title":"function Bird [1/3]"},{"location":"api/classexample_1_1_bird/#function-bird-23","text":"example::Bird::Bird ( const Bird & other ) = delete","title":"function Bird [2/3]"},{"location":"api/classexample_1_1_bird/#function-bird-33","text":"example::Bird::Bird ( Bird && Bird ) noexcept","title":"function Bird [3/3]"},{"location":"api/classexample_1_1_bird/#function-make95sound","text":"virtual void example::Bird::make_sound () override Implements example::Animal::make_sound","title":"function make_sound"},{"location":"api/classexample_1_1_bird/#function-move","text":"virtual void example::Bird::move () override Implements example::Animal::move","title":"function move"},{"location":"api/classexample_1_1_bird/#function-operator","text":"Bird & example::Bird::operator= ( const Bird & other ) = delete","title":"function operator="},{"location":"api/classexample_1_1_bird/#function-operator_1","text":"Bird & example::Bird::operator= ( Bird && other ) noexcept","title":"function operator="},{"location":"api/classexample_1_1_bird/#function-swap","text":"void example::Bird::swap ( Bird & other ) noexcept","title":"function swap"},{"location":"api/classexample_1_1_bird/#function-bird","text":"example::Bird::~Bird () = default The documentation for this class was generated from the following file src/bird.h","title":"function ~Bird"},{"location":"api/classexample_1_1_custom_exception/","text":"Class example::CustomException Class List > example > CustomException #include <exception.h> Inherits the following classes: exception Public Functions Type Name CustomException (const std::string & msg) virtual const char * what () const Public Functions Documentation function CustomException inline example::CustomException::CustomException ( const std::string & msg ) function what inline virtual const char * example::CustomException::what () const The documentation for this class was generated from the following file src/utils/exception.h","title":"Class example::CustomException"},{"location":"api/classexample_1_1_custom_exception/#class-examplecustomexception","text":"Class List > example > CustomException #include <exception.h> Inherits the following classes: exception","title":"Class example::CustomException"},{"location":"api/classexample_1_1_custom_exception/#public-functions","text":"Type Name CustomException (const std::string & msg) virtual const char * what () const","title":"Public Functions"},{"location":"api/classexample_1_1_custom_exception/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/classexample_1_1_custom_exception/#function-customexception","text":"inline example::CustomException::CustomException ( const std::string & msg )","title":"function CustomException"},{"location":"api/classexample_1_1_custom_exception/#function-what","text":"inline virtual const char * example::CustomException::what () const The documentation for this class was generated from the following file src/utils/exception.h","title":"function what"},{"location":"api/classexample_1_1_numeric_exception/","text":"Class example::NumericException Class List > example > NumericException #include <exception.h> Inherits the following classes: exception Public Functions Type Name NumericException (const std::string & msg) virtual const char * what () const Public Functions Documentation function NumericException inline example::NumericException::NumericException ( const std::string & msg ) function what inline virtual const char * example::NumericException::what () const The documentation for this class was generated from the following file src/utils/exception.h","title":"Class example::NumericException"},{"location":"api/classexample_1_1_numeric_exception/#class-examplenumericexception","text":"Class List > example > NumericException #include <exception.h> Inherits the following classes: exception","title":"Class example::NumericException"},{"location":"api/classexample_1_1_numeric_exception/#public-functions","text":"Type Name NumericException (const std::string & msg) virtual const char * what () const","title":"Public Functions"},{"location":"api/classexample_1_1_numeric_exception/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/classexample_1_1_numeric_exception/#function-numericexception","text":"inline example::NumericException::NumericException ( const std::string & msg )","title":"function NumericException"},{"location":"api/classexample_1_1_numeric_exception/#function-what","text":"inline virtual const char * example::NumericException::what () const The documentation for this class was generated from the following file src/utils/exception.h","title":"function what"},{"location":"api/classexample_1_1_special_bird/","text":"Class example::SpecialBird Class List > example > SpecialBird #include <special_bird.h> Inherits the following classes: example::Bird Public Types inherited from example::Animal See example::Animal Type Name typedef std::pair< Animal *, Animal * > Parents enum Type The 6 classes of animal kingdom. Public Functions Type Name SpecialBird (const std::string & name, SpecialBird * mother=nullptr, SpecialBird * father=nullptr) SpecialBird (const SpecialBird & other) = delete SpecialBird ( SpecialBird && SpecialBird) noexcept void do_something_special () SpecialBird & operator= (const SpecialBird & other) = delete SpecialBird & operator= ( SpecialBird && other) noexcept void swap ( SpecialBird & other) noexcept ~SpecialBird () = default Public Functions inherited from example::Bird See example::Bird Type Name Bird (const std::string & name, Bird * mother=nullptr, Bird * father=nullptr) Bird (const Bird & other) = delete Bird ( Bird && Bird) noexcept virtual void make_sound () override virtual void move () override Bird & operator= (const Bird & other) = delete Deleted copy operator. Bird & operator= ( Bird && other) noexcept Move operator. void swap ( Bird & other) noexcept ~Bird () = default Public Functions inherited from example::Animal See example::Animal Type Name Animal ( Type type, const std::string & name, Animal * mother=nullptr, Animal * father=nullptr) The main constructor. Animal (const Animal & other) = delete Animal ( Animal && animal) noexcept const std::string & get_name () const Get the name of the animal. virtual int get_num_of_eyes () override const Returns the number of eyes. virtual int get_num_of_limbs () override const Returns the number of limbs. Parents get_parents () const virtual bool has_tail () override const Returns true if the animal has a tail. virtual void make_sound () = 0 virtual void move () operator bool () const Returns true if this is an valid animal. Animal & operator= (const Animal & other) = delete Deleted copy operator. Animal & operator= ( Animal && other) noexcept Move operator. void some_inline_member_function ( Animal * animal) Lorem Ipsum. void swap ( Animal & other) noexcept virtual ~Animal () = default Public Functions inherited from example::AnimalInterface See example::AnimalInterface Type Name virtual int get_num_of_eyes () const = 0 Returns the number of eyes. virtual int get_num_of_limbs () const = 0 Returns the number of limbs. virtual bool has_tail () const = 0 Returns true if the animal has a tail. Public Static Functions inherited from example::Animal See example::Animal Type Name Animal * find_child_by_name ( Animal * parent) Animal * find_parent_by_name ( Animal * child) Protected Attributes inherited from example::Animal See example::Animal Type Name Animal * father The pointer to the father. Animal * mother The pointer to the mother. std::string name Public Functions Documentation function SpecialBird [1/3] example::SpecialBird::SpecialBird ( const std::string & name, SpecialBird * mother=nullptr, SpecialBird * father=nullptr ) function SpecialBird [2/3] example::SpecialBird::SpecialBird ( const SpecialBird & other ) = delete function SpecialBird [3/3] example::SpecialBird::SpecialBird ( SpecialBird && SpecialBird ) noexcept function do_something_special void example::SpecialBird::do_something_special () function operator= SpecialBird & example::SpecialBird::operator= ( const SpecialBird & other ) = delete function operator= SpecialBird & example::SpecialBird::operator= ( SpecialBird && other ) noexcept function swap void example::SpecialBird::swap ( SpecialBird & other ) noexcept function ~SpecialBird example::SpecialBird::~SpecialBird () = default The documentation for this class was generated from the following file src/special_bird.h","title":"Class example::SpecialBird"},{"location":"api/classexample_1_1_special_bird/#class-examplespecialbird","text":"Class List > example > SpecialBird #include <special_bird.h> Inherits the following classes: example::Bird","title":"Class example::SpecialBird"},{"location":"api/classexample_1_1_special_bird/#public-types-inherited-from-exampleanimal","text":"See example::Animal Type Name typedef std::pair< Animal *, Animal * > Parents enum Type The 6 classes of animal kingdom.","title":"Public Types inherited from example::Animal"},{"location":"api/classexample_1_1_special_bird/#public-functions","text":"Type Name SpecialBird (const std::string & name, SpecialBird * mother=nullptr, SpecialBird * father=nullptr) SpecialBird (const SpecialBird & other) = delete SpecialBird ( SpecialBird && SpecialBird) noexcept void do_something_special () SpecialBird & operator= (const SpecialBird & other) = delete SpecialBird & operator= ( SpecialBird && other) noexcept void swap ( SpecialBird & other) noexcept ~SpecialBird () = default","title":"Public Functions"},{"location":"api/classexample_1_1_special_bird/#public-functions-inherited-from-examplebird","text":"See example::Bird Type Name Bird (const std::string & name, Bird * mother=nullptr, Bird * father=nullptr) Bird (const Bird & other) = delete Bird ( Bird && Bird) noexcept virtual void make_sound () override virtual void move () override Bird & operator= (const Bird & other) = delete Deleted copy operator. Bird & operator= ( Bird && other) noexcept Move operator. void swap ( Bird & other) noexcept ~Bird () = default","title":"Public Functions inherited from example::Bird"},{"location":"api/classexample_1_1_special_bird/#public-functions-inherited-from-exampleanimal","text":"See example::Animal Type Name Animal ( Type type, const std::string & name, Animal * mother=nullptr, Animal * father=nullptr) The main constructor. Animal (const Animal & other) = delete Animal ( Animal && animal) noexcept const std::string & get_name () const Get the name of the animal. virtual int get_num_of_eyes () override const Returns the number of eyes. virtual int get_num_of_limbs () override const Returns the number of limbs. Parents get_parents () const virtual bool has_tail () override const Returns true if the animal has a tail. virtual void make_sound () = 0 virtual void move () operator bool () const Returns true if this is an valid animal. Animal & operator= (const Animal & other) = delete Deleted copy operator. Animal & operator= ( Animal && other) noexcept Move operator. void some_inline_member_function ( Animal * animal) Lorem Ipsum. void swap ( Animal & other) noexcept virtual ~Animal () = default","title":"Public Functions inherited from example::Animal"},{"location":"api/classexample_1_1_special_bird/#public-functions-inherited-from-exampleanimalinterface","text":"See example::AnimalInterface Type Name virtual int get_num_of_eyes () const = 0 Returns the number of eyes. virtual int get_num_of_limbs () const = 0 Returns the number of limbs. virtual bool has_tail () const = 0 Returns true if the animal has a tail.","title":"Public Functions inherited from example::AnimalInterface"},{"location":"api/classexample_1_1_special_bird/#public-static-functions-inherited-from-exampleanimal","text":"See example::Animal Type Name Animal * find_child_by_name ( Animal * parent) Animal * find_parent_by_name ( Animal * child)","title":"Public Static Functions inherited from example::Animal"},{"location":"api/classexample_1_1_special_bird/#protected-attributes-inherited-from-exampleanimal","text":"See example::Animal Type Name Animal * father The pointer to the father. Animal * mother The pointer to the mother. std::string name","title":"Protected Attributes inherited from example::Animal"},{"location":"api/classexample_1_1_special_bird/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/classexample_1_1_special_bird/#function-specialbird-13","text":"example::SpecialBird::SpecialBird ( const std::string & name, SpecialBird * mother=nullptr, SpecialBird * father=nullptr )","title":"function SpecialBird [1/3]"},{"location":"api/classexample_1_1_special_bird/#function-specialbird-23","text":"example::SpecialBird::SpecialBird ( const SpecialBird & other ) = delete","title":"function SpecialBird [2/3]"},{"location":"api/classexample_1_1_special_bird/#function-specialbird-33","text":"example::SpecialBird::SpecialBird ( SpecialBird && SpecialBird ) noexcept","title":"function SpecialBird [3/3]"},{"location":"api/classexample_1_1_special_bird/#function-do95something95special","text":"void example::SpecialBird::do_something_special ()","title":"function do_something_special"},{"location":"api/classexample_1_1_special_bird/#function-operator","text":"SpecialBird & example::SpecialBird::operator= ( const SpecialBird & other ) = delete","title":"function operator="},{"location":"api/classexample_1_1_special_bird/#function-operator_1","text":"SpecialBird & example::SpecialBird::operator= ( SpecialBird && other ) noexcept","title":"function operator="},{"location":"api/classexample_1_1_special_bird/#function-swap","text":"void example::SpecialBird::swap ( SpecialBird & other ) noexcept","title":"function swap"},{"location":"api/classexample_1_1_special_bird/#function-specialbird","text":"example::SpecialBird::~SpecialBird () = default The documentation for this class was generated from the following file src/special_bird.h","title":"function ~SpecialBird"},{"location":"api/classexample_1_1inner__namespace_1_1_vector/","text":"Class example::inner_namespace::Vector Class List > example > inner_namespace > Vector #include <animal.h> The documentation for this class was generated from the following file src/animal.h","title":"Class example::inner\\_namespace::Vector"},{"location":"api/classexample_1_1inner__namespace_1_1_vector/#class-exampleinner95namespacevector","text":"Class List > example > inner_namespace > Vector #include <animal.h> The documentation for this class was generated from the following file src/animal.h","title":"Class example::inner_namespace::Vector"},{"location":"api/config_8h/","text":"File config.h File List > src > config.h Go to the source code of this file. This is a config file. More... Macros Type Name define CONFIG_HELLO () (123) define CONFIG_WORLD () (\"abx\") define PI () (3.14159265358979323846) Detailed Description This is a detailed description Macro Definition Documentation define CONFIG_HELLO #define CONFIG_HELLO () define CONFIG_WORLD #define CONFIG_WORLD () define PI #define PI () The documentation for this class was generated from the following file src/config.h","title":"File config.h"},{"location":"api/config_8h/#file-configh","text":"File List > src > config.h Go to the source code of this file. This is a config file. More...","title":"File config.h"},{"location":"api/config_8h/#macros","text":"Type Name define CONFIG_HELLO () (123) define CONFIG_WORLD () (\"abx\") define PI () (3.14159265358979323846)","title":"Macros"},{"location":"api/config_8h/#detailed-description","text":"This is a detailed description","title":"Detailed Description"},{"location":"api/config_8h/#macro-definition-documentation","text":"","title":"Macro Definition Documentation"},{"location":"api/config_8h/#define-config95hello","text":"#define CONFIG_HELLO ()","title":"define CONFIG_HELLO"},{"location":"api/config_8h/#define-config95world","text":"#define CONFIG_WORLD ()","title":"define CONFIG_WORLD"},{"location":"api/config_8h/#define-pi","text":"#define PI () The documentation for this class was generated from the following file src/config.h","title":"define PI"},{"location":"api/config_8h_source/","text":"File config.h File List > src > config.h Go to the documentation of this file. #ifndef EXAMPLE_CONFIG_H #define EXAMPLE_CONFIG_H #define CONFIG_HELLO (123) #define CONFIG_WORLD (\"abx\") #define PI (3.14159265358979323846) #endif","title":"File config.h"},{"location":"api/config_8h_source/#file-configh","text":"File List > src > config.h Go to the documentation of this file. #ifndef EXAMPLE_CONFIG_H #define EXAMPLE_CONFIG_H #define CONFIG_HELLO (123) #define CONFIG_WORLD (\"abx\") #define PI (3.14159265358979323846) #endif","title":"File config.h"},{"location":"api/dir_313caf1132e152dd9b58bea13a4052ca/","text":"Dir src/utils File List > src > utils This is a directory. More... Files Type Name file exception.h Detailed Description This is a detailed description The documentation for this class was generated from the following file src/utils/","title":"Dir src/utils"},{"location":"api/dir_313caf1132e152dd9b58bea13a4052ca/#dir-srcutils","text":"File List > src > utils This is a directory. More...","title":"Dir src/utils"},{"location":"api/dir_313caf1132e152dd9b58bea13a4052ca/#files","text":"Type Name file exception.h","title":"Files"},{"location":"api/dir_313caf1132e152dd9b58bea13a4052ca/#detailed-description","text":"This is a detailed description The documentation for this class was generated from the following file src/utils/","title":"Detailed Description"},{"location":"api/dir_68267d1309a1af8e8297ef4c3efbcdba/","text":"Dir src File List > src This is a directory. More... Files Type Name file animal.h file animal_interface.h file bird.h file config.h This is a config file. file example.h file special_bird.h Directories Type Name dir utils This is a directory. Detailed Description This is a detailed description The documentation for this class was generated from the following file src/","title":"Dir src"},{"location":"api/dir_68267d1309a1af8e8297ef4c3efbcdba/#dir-src","text":"File List > src This is a directory. More...","title":"Dir src"},{"location":"api/dir_68267d1309a1af8e8297ef4c3efbcdba/#files","text":"Type Name file animal.h file animal_interface.h file bird.h file config.h This is a config file. file example.h file special_bird.h","title":"Files"},{"location":"api/dir_68267d1309a1af8e8297ef4c3efbcdba/#directories","text":"Type Name dir utils This is a directory.","title":"Directories"},{"location":"api/dir_68267d1309a1af8e8297ef4c3efbcdba/#detailed-description","text":"This is a detailed description The documentation for this class was generated from the following file src/","title":"Detailed Description"},{"location":"api/example_8h/","text":"File example.h File List > src > example.h Go to the source code of this file. #include \"animal.h\" #include \"bird.h\" #include \"utils/exception.h\" The documentation for this class was generated from the following file src/example.h","title":"File example.h"},{"location":"api/example_8h/#file-exampleh","text":"File List > src > example.h Go to the source code of this file. #include \"animal.h\" #include \"bird.h\" #include \"utils/exception.h\" The documentation for this class was generated from the following file src/example.h","title":"File example.h"},{"location":"api/example_8h_source/","text":"File example.h File List > src > example.h Go to the documentation of this file. #include \"animal.h\" #include \"bird.h\" #include \"utils/exception.h\"","title":"File example.h"},{"location":"api/example_8h_source/#file-exampleh","text":"File List > src > example.h Go to the documentation of this file. #include \"animal.h\" #include \"bird.h\" #include \"utils/exception.h\"","title":"File example.h"},{"location":"api/exception_8h/","text":"File exception.h File List > src > utils > exception.h Go to the source code of this file. #include <exception> #include <string> Namespaces Type Name namespace example Classes Type Name class CustomException class NumericException The documentation for this class was generated from the following file src/utils/exception.h","title":"File exception.h"},{"location":"api/exception_8h/#file-exceptionh","text":"File List > src > utils > exception.h Go to the source code of this file. #include <exception> #include <string>","title":"File exception.h"},{"location":"api/exception_8h/#namespaces","text":"Type Name namespace example","title":"Namespaces"},{"location":"api/exception_8h/#classes","text":"Type Name class CustomException class NumericException The documentation for this class was generated from the following file src/utils/exception.h","title":"Classes"},{"location":"api/exception_8h_source/","text":"File exception.h File List > src > utils > exception.h Go to the documentation of this file. #ifndef EXAMPLE_EXCEPTION_H #define EXAMPLE_EXCEPTION_H #include <exception> #include <string> namespace example { class CustomException : public std::exception { public: CustomException(const std::string& msg):std::exception(),msg(msg){ } virtual const char* what() const throw() { return msg.c_str(); } private: std::string msg; }; class NumericException : public std::exception { public: NumericException(const std::string& msg):std::exception(),msg(msg){ } virtual const char* what() const throw() { return msg.c_str(); } private: std::string msg; }; } #endif","title":"File exception.h"},{"location":"api/exception_8h_source/#file-exceptionh","text":"File List > src > utils > exception.h Go to the documentation of this file. #ifndef EXAMPLE_EXCEPTION_H #define EXAMPLE_EXCEPTION_H #include <exception> #include <string> namespace example { class CustomException : public std::exception { public: CustomException(const std::string& msg):std::exception(),msg(msg){ } virtual const char* what() const throw() { return msg.c_str(); } private: std::string msg; }; class NumericException : public std::exception { public: NumericException(const std::string& msg):std::exception(),msg(msg){ } virtual const char* what() const throw() { return msg.c_str(); } private: std::string msg; }; } #endif","title":"File exception.h"},{"location":"api/files/","text":"File List Here is a list of all files with brief descriptions: file markdown-demo.md dir src This is a directory. file animal.h file animal_interface.h file bird.h file config.h This is a config file. file example.h file special_bird.h dir utils This is a directory. file exception.h","title":"File List"},{"location":"api/files/#file-list","text":"Here is a list of all files with brief descriptions: file markdown-demo.md dir src This is a directory. file animal.h file animal_interface.h file bird.h file config.h This is a config file. file example.h file special_bird.h dir utils This is a directory. file exception.h","title":"File List"},{"location":"api/functions/","text":"Functions s some_global_function ( animal.h )","title":"Functions"},{"location":"api/functions/#functions","text":"","title":"Functions"},{"location":"api/functions/#s","text":"some_global_function ( animal.h )","title":"s"},{"location":"api/group__animals/","text":"Group animals Modules > animals This is a brief description to the animals group. More... Files Type Name file config.h This is a config file. Classes Type Name class example::Animal Base class for all animals from which Bird derives. interface example::AnimalInterface class example::Bird class example::CustomException class example::NumericException class example::SpecialBird Public Types Type Name enum example::Animal::Type The 6 classes of animal kingdom. Public Functions Type Name void some_global_function ( example::Animal * animal) Some random global function that modifies Animal. void example::some_namespace_function ( Animal * animal) Some random namespace function that modifies Animal . Macros Type Name define CONFIG_HELLO () (123) define CONFIG_WORLD () (\"abx\") define PI () (3.14159265358979323846) Detailed Description Some inner namespace. Some random brief description. Some detailed description here Public Types Documentation enum Type enum example::Animal::Type { NONE = 0, INSECT = 1, AMPHIBIAN = 2, BIRD = 3, FISH = 4, REPTILE = 5, MAMMAL = 6 }; Lorem Ipsum Donor. Public Functions Documentation function some_global_function void some_global_function ( example::Animal * animal ) See also: Animal Parameters: animal The pointer to the animal instance function some_namespace_function void example::some_namespace_function ( Animal * animal ) See also: Animal Parameters: animal The pointer to the animal instance Macro Definition Documentation define CONFIG_HELLO #define CONFIG_HELLO () define CONFIG_WORLD #define CONFIG_WORLD () define PI #define PI ()","title":"Group animals"},{"location":"api/group__animals/#group-animals","text":"Modules > animals This is a brief description to the animals group. More...","title":"Group animals"},{"location":"api/group__animals/#files","text":"Type Name file config.h This is a config file.","title":"Files"},{"location":"api/group__animals/#classes","text":"Type Name class example::Animal Base class for all animals from which Bird derives. interface example::AnimalInterface class example::Bird class example::CustomException class example::NumericException class example::SpecialBird","title":"Classes"},{"location":"api/group__animals/#public-types","text":"Type Name enum example::Animal::Type The 6 classes of animal kingdom.","title":"Public Types"},{"location":"api/group__animals/#public-functions","text":"Type Name void some_global_function ( example::Animal * animal) Some random global function that modifies Animal. void example::some_namespace_function ( Animal * animal) Some random namespace function that modifies Animal .","title":"Public Functions"},{"location":"api/group__animals/#macros","text":"Type Name define CONFIG_HELLO () (123) define CONFIG_WORLD () (\"abx\") define PI () (3.14159265358979323846)","title":"Macros"},{"location":"api/group__animals/#detailed-description","text":"Some inner namespace. Some random brief description. Some detailed description here","title":"Detailed Description"},{"location":"api/group__animals/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"api/group__animals/#enum-type","text":"enum example::Animal::Type { NONE = 0, INSECT = 1, AMPHIBIAN = 2, BIRD = 3, FISH = 4, REPTILE = 5, MAMMAL = 6 }; Lorem Ipsum Donor.","title":"enum Type"},{"location":"api/group__animals/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/group__animals/#function-some95global95function","text":"void some_global_function ( example::Animal * animal ) See also: Animal Parameters: animal The pointer to the animal instance","title":"function some_global_function"},{"location":"api/group__animals/#function-some95namespace95function","text":"void example::some_namespace_function ( Animal * animal ) See also: Animal Parameters: animal The pointer to the animal instance","title":"function some_namespace_function"},{"location":"api/group__animals/#macro-definition-documentation","text":"","title":"Macro Definition Documentation"},{"location":"api/group__animals/#define-config95hello","text":"#define CONFIG_HELLO ()","title":"define CONFIG_HELLO"},{"location":"api/group__animals/#define-config95world","text":"#define CONFIG_WORLD ()","title":"define CONFIG_WORLD"},{"location":"api/group__animals/#define-pi","text":"#define PI ()","title":"define PI"},{"location":"api/group__organism/","text":"Group organism Modules > organism This is a brief description to the organism group. More... Modules Type Name module An animal group example This is a brief description to the animals group. Detailed Description Some detailed description here","title":"Group organism"},{"location":"api/group__organism/#group-organism","text":"Modules > organism This is a brief description to the organism group. More...","title":"Group organism"},{"location":"api/group__organism/#modules","text":"Type Name module An animal group example This is a brief description to the animals group.","title":"Modules"},{"location":"api/group__organism/#detailed-description","text":"Some detailed description here","title":"Detailed Description"},{"location":"api/hierarchy/","text":"Class Hierarchy This inheritance list is sorted roughly, but not completely, alphabetically: interface example::AnimalInterface class example::Animal Base class for all animals from which Bird derives. class example::Bird class example::SpecialBird class example::inner_namespace::Vector struct example::Animal::Result Some random inner class of Animal . class exception class example::CustomException class example::NumericException","title":"Class Hierarchy"},{"location":"api/hierarchy/#class-hierarchy","text":"This inheritance list is sorted roughly, but not completely, alphabetically: interface example::AnimalInterface class example::Animal Base class for all animals from which Bird derives. class example::Bird class example::SpecialBird class example::inner_namespace::Vector struct example::Animal::Result Some random inner class of Animal . class exception class example::CustomException class example::NumericException","title":"Class Hierarchy"},{"location":"api/macros/","text":"Macros c CONFIG_HELLO ( config.h ) CONFIG_WORLD ( config.h ) p PI ( config.h )","title":"Macros"},{"location":"api/macros/#macros","text":"","title":"Macros"},{"location":"api/macros/#c","text":"CONFIG_HELLO ( config.h ) CONFIG_WORLD ( config.h )","title":"c"},{"location":"api/macros/#p","text":"PI ( config.h )","title":"p"},{"location":"api/markdown-demo_8md/","text":"File markdown-demo.md File List > markdown-demo.md Go to the source code of this file. The documentation for this class was generated from the following file src/markdown-demo.md","title":"File markdown-demo.md"},{"location":"api/markdown-demo_8md/#file-markdown-demomd","text":"File List > markdown-demo.md Go to the source code of this file. The documentation for this class was generated from the following file src/markdown-demo.md","title":"File markdown-demo.md"},{"location":"api/markdown-demo_8md_source/","text":"File markdown-demo.md File List > markdown-demo.md Go to the documentation of this file. # Markdown test **I highly do not recommend to use markdown through Doxygen! The source markdown file will go through Doxygen to xml and then from xml through doxybook back into markdown. If you REALLY need to use markdown through Doxygen, it is here, but limited. IMHO, just write a simple shell script to copy the necessary markdown files into GitBook directly. Anyway, the markdown below is copied from here: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet and most of it works through doxybook.** ## Headers ```markdown # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 Alternatively, for H1 and H2, an underline-ish style: Alt-H1 ====== Alt-H2 ------ ``` # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 Alternatively, for H1 and H2, an underline-ish style: Alt-H1 ====== Alt-H2 ------ ## Emphasis ```markdown Emphasis, aka italics, with *asterisks* or _underscores_. Strong emphasis, aka bold, with **asterisks** or __underscores__. Combined emphasis with **asterisks and _underscores_**. Strikethrough uses two tildes. ~~Scratch this.~~ ``` Emphasis, aka italics, with *asterisks* or _underscores_. Strong emphasis, aka bold, with **asterisks** or __underscores__. Combined emphasis with **asterisks and _underscores_**. Strikethrough uses two tildes. ~~Scratch this.~~ ## Lists ```markdown 1. First ordered list item 2. Another item * Unordered sub-list. 1. Actual numbers don't matter, just that it's a number 1. Ordered sub-list 4. And another item. You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown). To have a line break without a paragraph, you will need to use two trailing spaces. Note that this line is separate, but within the same paragraph. (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) * Unordered list can use asterisks - Or minuses + Or pluses ``` 1. First ordered list item 2. Another item * Unordered sub-list. 1. Actual numbers don't matter, just that it's a number 1. Ordered sub-list 4. And another item. You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown). To have a line break without a paragraph, you will need to use two trailing spaces. Note that this line is separate, but within the same paragraph. (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) * Unordered list can use asterisks - Or minuses + Or pluses ## Links ```markdown [I'm an inline-style link](https://www.google.com) [I'm an inline-style link with title](https://www.google.com \"Google's Homepage\") [I'm a reference-style link][Arbitrary case-insensitive reference text] [I'm a relative reference to a repository file](../blob/master/LICENSE) [You can use numbers for reference-style link definitions][1] Or leave it empty and use the [link text itself]. URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <http://www.example.com> and sometimes example.com (but not on Github, for example). Some text to show that the reference links can follow later. [arbitrary case-insensitive reference text]: https://www.mozilla.org [1]: http://slashdot.org [link text itself]: http://www.reddit.com ``` [I'm an inline-style link](https://www.google.com) [I'm an inline-style link with title](https://www.google.com \"Google's Homepage\") [I'm a reference-style link][Arbitrary case-insensitive reference text] [I'm a relative reference to a repository file](../blob/master/LICENSE) [You can use numbers for reference-style link definitions][1] Or leave it empty and use the [link text itself]. URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <http://www.example.com> and sometimes example.com (but not on Github, for example). Some text to show that the reference links can follow later. [arbitrary case-insensitive reference text]: https://www.mozilla.org [1]: http://slashdot.org [link text itself]: http://www.reddit.com ## Images ```markdown Here's our logo (hover to see the title text): Inline-style: ![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\") Reference-style: ![alt text][logo] [logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\" ``` Here's our logo (hover to see the title text): Inline-style: ![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\") Reference-style: ![alt text][logo] [logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\" ## Tables ```markdown Colons can be used to align columns. | Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown | Less | Pretty --- | --- | --- *Still* | `renders` | **nicely** 1 | 2 | 3 ``` Colons can be used to align columns. | Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown | Less | Pretty --- | --- | --- *Still* | `renders` | **nicely** 1 | 2 | 3 ## Blockquotes ```markdown > Blockquotes are very handy in email to emulate reply text. > This line is part of the same quote. Quote break. > This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. ``` > Blockquotes are very handy in email to emulate reply text. > This line is part of the same quote. Quote break. > This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. ## Inline HTML ```markdown <dl> <dt>Definition list</dt> <dd>Is something people use sometimes.</dd> <dt>Markdown in HTML</dt> <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd> </dl> ``` <dl> <dt>Definition list</dt> <dd>Is something people use sometimes.</dd> <dt>Markdown in HTML</dt> <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd> </dl>","title":"File markdown-demo.md"},{"location":"api/markdown-demo_8md_source/#file-markdown-demomd","text":"File List > markdown-demo.md Go to the documentation of this file. # Markdown test **I highly do not recommend to use markdown through Doxygen! The source markdown file will go through Doxygen to xml and then from xml through doxybook back into markdown. If you REALLY need to use markdown through Doxygen, it is here, but limited. IMHO, just write a simple shell script to copy the necessary markdown files into GitBook directly. Anyway, the markdown below is copied from here: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet and most of it works through doxybook.** ## Headers ```markdown # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 Alternatively, for H1 and H2, an underline-ish style: Alt-H1 ====== Alt-H2 ------ ``` # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 Alternatively, for H1 and H2, an underline-ish style: Alt-H1 ====== Alt-H2 ------ ## Emphasis ```markdown Emphasis, aka italics, with *asterisks* or _underscores_. Strong emphasis, aka bold, with **asterisks** or __underscores__. Combined emphasis with **asterisks and _underscores_**. Strikethrough uses two tildes. ~~Scratch this.~~ ``` Emphasis, aka italics, with *asterisks* or _underscores_. Strong emphasis, aka bold, with **asterisks** or __underscores__. Combined emphasis with **asterisks and _underscores_**. Strikethrough uses two tildes. ~~Scratch this.~~ ## Lists ```markdown 1. First ordered list item 2. Another item * Unordered sub-list. 1. Actual numbers don't matter, just that it's a number 1. Ordered sub-list 4. And another item. You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown). To have a line break without a paragraph, you will need to use two trailing spaces. Note that this line is separate, but within the same paragraph. (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) * Unordered list can use asterisks - Or minuses + Or pluses ``` 1. First ordered list item 2. Another item * Unordered sub-list. 1. Actual numbers don't matter, just that it's a number 1. Ordered sub-list 4. And another item. You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown). To have a line break without a paragraph, you will need to use two trailing spaces. Note that this line is separate, but within the same paragraph. (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) * Unordered list can use asterisks - Or minuses + Or pluses ## Links ```markdown [I'm an inline-style link](https://www.google.com) [I'm an inline-style link with title](https://www.google.com \"Google's Homepage\") [I'm a reference-style link][Arbitrary case-insensitive reference text] [I'm a relative reference to a repository file](../blob/master/LICENSE) [You can use numbers for reference-style link definitions][1] Or leave it empty and use the [link text itself]. URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <http://www.example.com> and sometimes example.com (but not on Github, for example). Some text to show that the reference links can follow later. [arbitrary case-insensitive reference text]: https://www.mozilla.org [1]: http://slashdot.org [link text itself]: http://www.reddit.com ``` [I'm an inline-style link](https://www.google.com) [I'm an inline-style link with title](https://www.google.com \"Google's Homepage\") [I'm a reference-style link][Arbitrary case-insensitive reference text] [I'm a relative reference to a repository file](../blob/master/LICENSE) [You can use numbers for reference-style link definitions][1] Or leave it empty and use the [link text itself]. URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <http://www.example.com> and sometimes example.com (but not on Github, for example). Some text to show that the reference links can follow later. [arbitrary case-insensitive reference text]: https://www.mozilla.org [1]: http://slashdot.org [link text itself]: http://www.reddit.com ## Images ```markdown Here's our logo (hover to see the title text): Inline-style: ![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\") Reference-style: ![alt text][logo] [logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\" ``` Here's our logo (hover to see the title text): Inline-style: ![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\") Reference-style: ![alt text][logo] [logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\" ## Tables ```markdown Colons can be used to align columns. | Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown | Less | Pretty --- | --- | --- *Still* | `renders` | **nicely** 1 | 2 | 3 ``` Colons can be used to align columns. | Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown | Less | Pretty --- | --- | --- *Still* | `renders` | **nicely** 1 | 2 | 3 ## Blockquotes ```markdown > Blockquotes are very handy in email to emulate reply text. > This line is part of the same quote. Quote break. > This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. ``` > Blockquotes are very handy in email to emulate reply text. > This line is part of the same quote. Quote break. > This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. ## Inline HTML ```markdown <dl> <dt>Definition list</dt> <dd>Is something people use sometimes.</dd> <dt>Markdown in HTML</dt> <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd> </dl> ``` <dl> <dt>Definition list</dt> <dd>Is something people use sometimes.</dd> <dt>Markdown in HTML</dt> <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd> </dl>","title":"File markdown-demo.md"},{"location":"api/md_src_markdown-demo/","text":"Markdown test I highly do not recommend to use markdown through Doxygen! The source markdown file will go through Doxygen to xml and then from xml through doxybook back into markdown. If you REALLY need to use markdown through Doxygen, it is here, but limited. IMHO, just write a simple shell script to copy the necessary markdown files into GitBook directly. Anyway, the markdown below is copied from here: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet and most of it works through doxybook. Headers # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 Alternatively, for H1 and H2, an underline-ish style: Alt-H1 ====== Alt-H2 ------ H1 H2 H3 H4 H5 H6 Alternatively, for H1 and H2, an underline-ish style: Alt-H1 Alt-H2 Emphasis Emphasis, aka italics, with *asterisks* or _underscores_. Strong emphasis, aka bold, with **asterisks** or __underscores__. Combined emphasis with **asterisks and _underscores_**. Strikethrough uses two tildes. ~~Scratch this.~~ Emphasis, aka italics, with asterisks or underscores . Strong emphasis, aka bold, with asterisks or underscores . Combined emphasis with asterisks and underscores . Strikethrough uses two tildes. Lists 1. First ordered list item 2. Another item * Unordered sub-list. 1. Actual numbers don't matter, just that it's a number 1. Ordered sub-list 4. And another item. You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown). To have a line break without a paragraph, you will need to use two trailing spaces. Note that this line is separate, but within the same paragraph. (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) * Unordered list can use asterisks - Or minuses + Or pluses First ordered list item Another item Unordered sub-list. Actual numbers don't matter, just that it's a number Ordered sub-list And another item.You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).To have a line break without a paragraph, you will need to use two trailing spaces. Note that this line is separate, but within the same paragraph. (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) Unordered list can use asterisks Or minuses Or pluses Links [I'm an inline-style link](https://www.google.com) [I'm an inline-style link with title](https://www.google.com \"Google's Homepage\") [I'm a reference-style link][Arbitrary case-insensitive reference text] [I'm a relative reference to a repository file](../blob/master/LICENSE) [You can use numbers for reference-style link definitions][1] Or leave it empty and use the [link text itself]. URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <http://www.example.com> and sometimes example.com (but not on Github, for example). Some text to show that the reference links can follow later. [arbitrary case-insensitive reference text]: https://www.mozilla.org [1]: http://slashdot.org [link text itself]: http://www.reddit.com I'm an inline-style link I'm an inline-style link with title I'm a reference-style link I'm a relative reference to a repository file You can use numbers for reference-style link definitions Or leave it empty and use the link text itself . URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example). Some text to show that the reference links can follow later. Images Here's our logo (hover to see the title text): Inline-style: ![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\") Reference-style: ![alt text][logo] [logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\" Here's our logo (hover to see the title text): Inline-style: Reference-style: Tables Colons can be used to align columns. | Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown | Less | Pretty --- | --- | --- *Still* | `renders` | **nicely** 1 | 2 | 3 Colons can be used to align columns. Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown Less Pretty Still renders nicely 1 2 3 Blockquotes > Blockquotes are very handy in email to emulate reply text. > This line is part of the same quote. Quote break. > This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. Blockquotes are very handy in email to emulate reply text. This line is part of the same quote. Quote break. This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote. Inline HTML <dl> <dt>Definition list</dt> <dd>Is something people use sometimes.</dd> <dt>Markdown in HTML</dt> <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd> </dl> Definition list Is something people use sometimes. Does not work very well. Use HTML tags .","title":"Markdown test"},{"location":"api/md_src_markdown-demo/#markdown-test","text":"I highly do not recommend to use markdown through Doxygen! The source markdown file will go through Doxygen to xml and then from xml through doxybook back into markdown. If you REALLY need to use markdown through Doxygen, it is here, but limited. IMHO, just write a simple shell script to copy the necessary markdown files into GitBook directly. Anyway, the markdown below is copied from here: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet and most of it works through doxybook.","title":"Markdown test"},{"location":"api/md_src_markdown-demo/#headers","text":"# H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 Alternatively, for H1 and H2, an underline-ish style: Alt-H1 ====== Alt-H2 ------","title":"Headers"},{"location":"api/md_src_markdown-demo/#h1","text":"","title":"H1"},{"location":"api/md_src_markdown-demo/#h2","text":"","title":"H2"},{"location":"api/md_src_markdown-demo/#h3","text":"","title":"H3"},{"location":"api/md_src_markdown-demo/#h4","text":"","title":"H4"},{"location":"api/md_src_markdown-demo/#h5","text":"","title":"H5"},{"location":"api/md_src_markdown-demo/#h6","text":"Alternatively, for H1 and H2, an underline-ish style:","title":"H6"},{"location":"api/md_src_markdown-demo/#alt-h1","text":"","title":"Alt-H1"},{"location":"api/md_src_markdown-demo/#alt-h2","text":"","title":"Alt-H2"},{"location":"api/md_src_markdown-demo/#emphasis","text":"Emphasis, aka italics, with *asterisks* or _underscores_. Strong emphasis, aka bold, with **asterisks** or __underscores__. Combined emphasis with **asterisks and _underscores_**. Strikethrough uses two tildes. ~~Scratch this.~~ Emphasis, aka italics, with asterisks or underscores . Strong emphasis, aka bold, with asterisks or underscores . Combined emphasis with asterisks and underscores . Strikethrough uses two tildes.","title":"Emphasis"},{"location":"api/md_src_markdown-demo/#lists","text":"1. First ordered list item 2. Another item * Unordered sub-list. 1. Actual numbers don't matter, just that it's a number 1. Ordered sub-list 4. And another item. You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown). To have a line break without a paragraph, you will need to use two trailing spaces. Note that this line is separate, but within the same paragraph. (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) * Unordered list can use asterisks - Or minuses + Or pluses First ordered list item Another item Unordered sub-list. Actual numbers don't matter, just that it's a number Ordered sub-list And another item.You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).To have a line break without a paragraph, you will need to use two trailing spaces. Note that this line is separate, but within the same paragraph. (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) Unordered list can use asterisks Or minuses Or pluses","title":"Lists"},{"location":"api/md_src_markdown-demo/#links","text":"[I'm an inline-style link](https://www.google.com) [I'm an inline-style link with title](https://www.google.com \"Google's Homepage\") [I'm a reference-style link][Arbitrary case-insensitive reference text] [I'm a relative reference to a repository file](../blob/master/LICENSE) [You can use numbers for reference-style link definitions][1] Or leave it empty and use the [link text itself]. URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <http://www.example.com> and sometimes example.com (but not on Github, for example). Some text to show that the reference links can follow later. [arbitrary case-insensitive reference text]: https://www.mozilla.org [1]: http://slashdot.org [link text itself]: http://www.reddit.com I'm an inline-style link I'm an inline-style link with title I'm a reference-style link I'm a relative reference to a repository file You can use numbers for reference-style link definitions Or leave it empty and use the link text itself . URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example). Some text to show that the reference links can follow later.","title":"Links"},{"location":"api/md_src_markdown-demo/#images","text":"Here's our logo (hover to see the title text): Inline-style: ![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\") Reference-style: ![alt text][logo] [logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\" Here's our logo (hover to see the title text): Inline-style: Reference-style:","title":"Images"},{"location":"api/md_src_markdown-demo/#tables","text":"Colons can be used to align columns. | Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown | Less | Pretty --- | --- | --- *Still* | `renders` | **nicely** 1 | 2 | 3 Colons can be used to align columns. Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown Less Pretty Still renders nicely 1 2 3","title":"Tables"},{"location":"api/md_src_markdown-demo/#blockquotes","text":"> Blockquotes are very handy in email to emulate reply text. > This line is part of the same quote. Quote break. > This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. Blockquotes are very handy in email to emulate reply text. This line is part of the same quote. Quote break. This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote.","title":"Blockquotes"},{"location":"api/md_src_markdown-demo/#inline-html","text":"<dl> <dt>Definition list</dt> <dd>Is something people use sometimes.</dd> <dt>Markdown in HTML</dt> <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd> </dl>","title":"Inline HTML"},{"location":"api/md_src_markdown-demo/#definition-list","text":"Is something people use sometimes. Does not work very well. Use HTML tags .","title":"Definition list"},{"location":"api/modules/","text":"Modules Here is a list of all modules: Some organism example This is a brief description to the organism group. An animal group example This is a brief description to the animals group.","title":"Modules"},{"location":"api/modules/#modules","text":"Here is a list of all modules: Some organism example This is a brief description to the organism group. An animal group example This is a brief description to the animals group.","title":"Modules"},{"location":"api/namespace_member_enums/","text":"Namespace Member Enums c CallbackType ( example )","title":"Namespace Member Enums"},{"location":"api/namespace_member_enums/#namespace-member-enums","text":"","title":"Namespace Member Enums"},{"location":"api/namespace_member_enums/#c","text":"CallbackType ( example )","title":"c"},{"location":"api/namespace_member_functions/","text":"Namespace Member Functions s some_namespace_function ( example )","title":"Namespace Member Functions"},{"location":"api/namespace_member_functions/#namespace-member-functions","text":"","title":"Namespace Member Functions"},{"location":"api/namespace_member_functions/#s","text":"some_namespace_function ( example )","title":"s"},{"location":"api/namespace_member_typedefs/","text":"Namespace Member Typedefs c Callback ( example )","title":"Namespace Member Typedefs"},{"location":"api/namespace_member_typedefs/#namespace-member-typedefs","text":"","title":"Namespace Member Typedefs"},{"location":"api/namespace_member_typedefs/#c","text":"Callback ( example )","title":"c"},{"location":"api/namespace_member_variables/","text":"Namespace Member Variables","title":"Namespace Member Variables"},{"location":"api/namespace_member_variables/#namespace-member-variables","text":"","title":"Namespace Member Variables"},{"location":"api/namespace_members/","text":"Namespace Members c Callback ( example ) CallbackType ( example ) s some_namespace_function ( example )","title":"Namespace Members"},{"location":"api/namespace_members/#namespace-members","text":"","title":"Namespace Members"},{"location":"api/namespace_members/#c","text":"Callback ( example ) CallbackType ( example )","title":"c"},{"location":"api/namespace_members/#s","text":"some_namespace_function ( example )","title":"s"},{"location":"api/namespaceexample/","text":"Namespace example Class List > example Namespaces Type Name namespace inner_namespace Classes Type Name class Animal Base class for all animals from which Bird derives. interface AnimalInterface class Bird class CustomException class NumericException class SpecialBird Public Types Type Name typedef std::function< void *( Animal *)> Callback Animal callback function definition. enum CallbackType Different types of an Animal callback events. Public Functions Type Name void some_namespace_function ( Animal * animal) Some random namespace function that modifies Animal . Public Types Documentation typedef Callback typedef std::function<void*(Animal*)> example::Callback; enum CallbackType enum example::CallbackType { NONE = 0, EAT, SLEEP, ATTACK }; Public Functions Documentation function some_namespace_function void example::some_namespace_function ( Animal * animal ) See also: Animal Parameters: animal The pointer to the animal instance The documentation for this class was generated from the following file src/animal.h","title":"Namespace example"},{"location":"api/namespaceexample/#namespace-example","text":"Class List > example","title":"Namespace example"},{"location":"api/namespaceexample/#namespaces","text":"Type Name namespace inner_namespace","title":"Namespaces"},{"location":"api/namespaceexample/#classes","text":"Type Name class Animal Base class for all animals from which Bird derives. interface AnimalInterface class Bird class CustomException class NumericException class SpecialBird","title":"Classes"},{"location":"api/namespaceexample/#public-types","text":"Type Name typedef std::function< void *( Animal *)> Callback Animal callback function definition. enum CallbackType Different types of an Animal callback events.","title":"Public Types"},{"location":"api/namespaceexample/#public-functions","text":"Type Name void some_namespace_function ( Animal * animal) Some random namespace function that modifies Animal .","title":"Public Functions"},{"location":"api/namespaceexample/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"api/namespaceexample/#typedef-callback","text":"typedef std::function<void*(Animal*)> example::Callback;","title":"typedef Callback"},{"location":"api/namespaceexample/#enum-callbacktype","text":"enum example::CallbackType { NONE = 0, EAT, SLEEP, ATTACK };","title":"enum CallbackType"},{"location":"api/namespaceexample/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api/namespaceexample/#function-some95namespace95function","text":"void example::some_namespace_function ( Animal * animal ) See also: Animal Parameters: animal The pointer to the animal instance The documentation for this class was generated from the following file src/animal.h","title":"function some_namespace_function"},{"location":"api/namespaceexample_1_1inner__namespace/","text":"Namespace example::inner_namespace Class List > example > inner_namespace Classes Type Name class Vector The documentation for this class was generated from the following file src/animal.h","title":"Namespace example::inner\\_namespace"},{"location":"api/namespaceexample_1_1inner__namespace/#namespace-exampleinner95namespace","text":"Class List > example > inner_namespace","title":"Namespace example::inner_namespace"},{"location":"api/namespaceexample_1_1inner__namespace/#classes","text":"Type Name class Vector The documentation for this class was generated from the following file src/animal.h","title":"Classes"},{"location":"api/namespaces/","text":"Namespace List Here is a list of all namespaces with brief descriptions: namespace example namespace inner_namespace","title":"Namespace List"},{"location":"api/namespaces/#namespace-list","text":"Here is a list of all namespaces with brief descriptions: namespace example namespace inner_namespace","title":"Namespace List"},{"location":"api/pages/","text":"Related Pages Here is a list of all related documentation pages: Bug List My Personal Index Page Markdown test Test List Todo List","title":"Related Pages"},{"location":"api/pages/#related-pages","text":"Here is a list of all related documentation pages: Bug List My Personal Index Page Markdown test Test List Todo List","title":"Related Pages"},{"location":"api/special__bird_8h/","text":"File special_bird.h File List > src > special_bird.h Go to the source code of this file. #include \"bird.h\" Namespaces Type Name namespace example Classes Type Name class SpecialBird The documentation for this class was generated from the following file src/special_bird.h","title":"File special\\_bird.h"},{"location":"api/special__bird_8h/#file-special95birdh","text":"File List > src > special_bird.h Go to the source code of this file. #include \"bird.h\"","title":"File special_bird.h"},{"location":"api/special__bird_8h/#namespaces","text":"Type Name namespace example","title":"Namespaces"},{"location":"api/special__bird_8h/#classes","text":"Type Name class SpecialBird The documentation for this class was generated from the following file src/special_bird.h","title":"Classes"},{"location":"api/special__bird_8h_source/","text":"File special_bird.h File List > src > special_bird.h Go to the documentation of this file. #ifndef EXAMPLE_SPECIAL_BIRD_H #define EXAMPLE_SPECIAL_BIRD_H #include \"bird.h\" namespace example { class SpecialBird: public Bird { public: SpecialBird(const std::string& name, SpecialBird* mother = nullptr, SpecialBird* father = nullptr); SpecialBird(const SpecialBird& other) = delete; SpecialBird(SpecialBird&& SpecialBird) noexcept; ~SpecialBird() = default; void swap(SpecialBird& other) noexcept; void do_something_special(); SpecialBird& operator = (const SpecialBird& other) = delete; SpecialBird& operator = (SpecialBird&& other) noexcept; }; } #endif","title":"File special\\_bird.h"},{"location":"api/special__bird_8h_source/#file-special95birdh","text":"File List > src > special_bird.h Go to the documentation of this file. #ifndef EXAMPLE_SPECIAL_BIRD_H #define EXAMPLE_SPECIAL_BIRD_H #include \"bird.h\" namespace example { class SpecialBird: public Bird { public: SpecialBird(const std::string& name, SpecialBird* mother = nullptr, SpecialBird* father = nullptr); SpecialBird(const SpecialBird& other) = delete; SpecialBird(SpecialBird&& SpecialBird) noexcept; ~SpecialBird() = default; void swap(SpecialBird& other) noexcept; void do_something_special(); SpecialBird& operator = (const SpecialBird& other) = delete; SpecialBird& operator = (SpecialBird&& other) noexcept; }; } #endif","title":"File special_bird.h"},{"location":"api/structexample_1_1_animal_1_1_result/","text":"Struct example::Animal::Result Class List > example > Animal > Result Some random inner class of Animal . #include <animal.h> Public Attributes Type Name const Animal * father = = nullptr const Animal * mother = = nullptr const std::string name const Type type = = Type::NONE Public Attributes Documentation variable father const Animal* example::Animal::Result::father; variable mother const Animal* example::Animal::Result::mother; variable name const std::string example::Animal::Result::name; variable type const Type example::Animal::Result::type; The documentation for this class was generated from the following file src/animal.h","title":"Struct example::Animal::Result"},{"location":"api/structexample_1_1_animal_1_1_result/#struct-exampleanimalresult","text":"Class List > example > Animal > Result Some random inner class of Animal . #include <animal.h>","title":"Struct example::Animal::Result"},{"location":"api/structexample_1_1_animal_1_1_result/#public-attributes","text":"Type Name const Animal * father = = nullptr const Animal * mother = = nullptr const std::string name const Type type = = Type::NONE","title":"Public Attributes"},{"location":"api/structexample_1_1_animal_1_1_result/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api/structexample_1_1_animal_1_1_result/#variable-father","text":"const Animal* example::Animal::Result::father;","title":"variable father"},{"location":"api/structexample_1_1_animal_1_1_result/#variable-mother","text":"const Animal* example::Animal::Result::mother;","title":"variable mother"},{"location":"api/structexample_1_1_animal_1_1_result/#variable-name","text":"const std::string example::Animal::Result::name;","title":"variable name"},{"location":"api/structexample_1_1_animal_1_1_result/#variable-type","text":"const Type example::Animal::Result::type; The documentation for this class was generated from the following file src/animal.h","title":"variable type"},{"location":"api/test/","text":"Test List Class example::Animal Some random test description","title":"Test List"},{"location":"api/test/#test-list","text":"","title":"Test List"},{"location":"api/test/#class-exampleanimal","text":"Some random test description","title":"Class example::Animal"},{"location":"api/todo/","text":"Todo List Class example::Animal Some random todo","title":"Todo List"},{"location":"api/todo/#todo-list","text":"","title":"Todo List"},{"location":"api/todo/#class-exampleanimal","text":"Some random todo","title":"Class example::Animal"},{"location":"api/variables/","text":"Variables","title":"Variables"},{"location":"api/variables/#variables","text":"","title":"Variables"}]}